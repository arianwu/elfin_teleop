#!/usr/bin/env python
import time
import copy
import roslib#; roslib.load_manifest('ur_driver')
import rospy
import actionlib
from std_msgs.msg import String
from control_msgs.msg import *
from trajectory_msgs.msg import *

# ---------------- CLASS ----------------
class KeyboardGazeboNode():
    def __init__(self):
        print('KeyboardGazeboNode: initializing node')

        # Initialize Variables
        self.joint_upper_limit = [ 3.14,  2.35,  2.61,  3.14,  2.56,  3.14]
        self.joint_lower_limit = [-3.14, -2.35, -2.61, -3.14, -2.56, -3.14]
        self.joint_position = [0, 0, 0, 0, 0, 0]
        self.joint_names = ['elfin_joint1', 'elfin_joint2', 'elfin_joint3', 'elfin_joint4', 'elfin_joint5', 'elfin_joint6']

        # ROS Infrastructure
        self.sub_keys = rospy.Subscriber('/keys', String, self.keys_callback)

        # Action Library for ros_control
        self.robot_client = actionlib.SimpleActionClient('elfin_arm_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
        
        print "Waiting for server..."
        self.robot_client.wait_for_server()
        print "Connected to server"

        self.g = FollowJointTrajectoryGoal()
        self.g.trajectory = JointTrajectory()
        self.g.trajectory.joint_names = self.joint_names

        # Initial position
        self.g.trajectory.points = [ JointTrajectoryPoint(positions=self.joint_position, velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
        self.robot_client.send_goal(self.g)
        self.robot_client.wait_for_result()
        rospy.sleep(1)


    def main(self):
        # Main Loop
        rate = rospy.Rate(100)
        while not rospy.is_shutdown():
            self.robot_client.cancel_goal()
            self.g.trajectory.points = [ JointTrajectoryPoint(positions=self.joint_position, velocities=[0]*6, time_from_start=rospy.Duration(0.008))]
            self.robot_client.send_goal(self.g)
            self.robot_client.wait_for_result()
     
            rate.sleep()
        print("toy fuera del loop")


    def keys_callback(self, msg):
        i = 0.1
        key = msg.data
        unlimited_joints = copy.copy(self.joint_position)
        if(key=="q"):
            unlimited_joints[0] += i
        elif(key=="a"):
            unlimited_joints[0] -= i
        
        elif(key=="w"):
            unlimited_joints[1] += i
        elif(key=="s"):
            unlimited_joints[1] -= i
     
        elif(key=="e"):
            unlimited_joints[2] += i
        elif(key=="d"):
            unlimited_joints[2] -= i
     
        elif(key=="r"):
            unlimited_joints[3] += i
        elif(key=="f"):
            unlimited_joints[3] -= i
     
        elif(key=="t"):
            unlimited_joints[4] += i
        elif(key=="g"):
            unlimited_joints[4] -= i
     
        elif(key=="y"):
            unlimited_joints[5] += i
        elif(key=="h"):
            unlimited_joints[5] -= i

        elif(key=="z"):
            unlimited_joints = [0, 0, 0, 0, 0, 0]
        elif(key=="m"):
            unlimited_joints = [0.0, 0.78, -1.57, 0, 0.78, 0.0]


        self.joint_position = self.limit_joints(unlimited_joints)


    def limit_joints(self, q):
        limited = copy.copy(q)
        for i in range(6):
            if q[i] > self.joint_upper_limit[i]:
                limited[i] = self.joint_upper_limit[i]
            elif q[i] < self.joint_lower_limit[i]:
                limited[i] = self.joint_lower_limit[i]
        return limited


if __name__ == '__main__':
    print('starting keyboard_gazebo')
    rospy.init_node('keyboard_gazebo', disable_signals=True)
    node = KeyboardGazeboNode()

    try:
        node.main()
        rospy.spin()
    except:  # rospy.ROSInterruptException:
        node.robot_client.cancel_goal()
        print('caught exception')
    print('exiting')
