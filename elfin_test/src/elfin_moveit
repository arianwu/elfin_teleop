#!/usr/bin/env python
import sys
import time
import copy
import rospy
import numpy as np
from sensor_msgs.msg import JointState

import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from moveit_commander.conversions import pose_to_list

# ---------------- CLASS ----------------
class ElfinMoveitNode():
    def __init__(self):
        print('ElfinMoveitNode: initializing node')

        moveit_commander.roscpp_initialize(sys.argv)
        rospy.init_node('elfin_moveit', disable_signals=True)

        # Initialize Variables
        self.joint_upper_limit = np.array([ 3.14,  2.35,  2.61,  3.14,  2.56,  3.14])
        self.joint_lower_limit = np.array([-3.14, -2.35, -2.61, -3.14, -2.56, -3.14])
        self.joint_position = np.zeros(6)
        self.joint_names = ['elfin_joint1', 'elfin_joint2', 'elfin_joint3', 'elfin_joint4', 'elfin_joint5', 'elfin_joint6']

        self.joint_states = np.zeros(6)
        self.max_velocity = np.full((6), 1.57)
        self.velocity_scale = 0.6
        self.blend_proportion = 0.25

        # ROS Infrastructure
        self.sub_joint_command = rospy.Subscriber('joint_command', JointState, self.joint_command_callback)
        self.sub_joint_states = rospy.Subscriber('joint_states', JointState, self.joint_states_callback)

        # Initialize MoveIt Commander
        robot = moveit_commander.RobotCommander()
        scene = moveit_commander.PlanningSceneInterface()
        group_name = "elfin_arm"
        move_group = moveit_commander.MoveGroupCommander(group_name)
        planning_frame = move_group.get_planning_frame()
        eef_link = move_group.get_end_effector_link()
        group_names = robot.get_group_names()

        self.robot = robot
        self.scene = scene
        self.move_group = move_group
        self.planning_frame = planning_frame
        self.eef_link = eef_link
        self.group_names = group_names

        self.move_group.set_max_velocity_scaling_factor(1)
        self.move_group.set_max_acceleration_scaling_factor(0.05)

        rospy.sleep(1)


    def joint_command_callback(self, msg):
        # Extract desired final position
        unlimited_joints = msg.position
        # Transform from [-1..1] to radians
        self.joint_position = self.transform_joints(unlimited_joints)

        # Send position command through MoveIt
        self.move_group.go(self.joint_position)
        self.move_group.stop()


    def joint_states_callback(self, msg):
        # Store current Joint States
        self.joint_states = np.array(msg.position)


    def transform_joints(self, q):
        limited = q * self.joint_upper_limit
        limited = np.where(limited > self.joint_upper_limit, self.joint_upper_limit, limited)
        return np.where(limited < self.joint_lower_limit, self.joint_lower_limit, limited)


if __name__ == '__main__':
    print('starting elfin_moveit')
    node = ElfinMoveitNode()

    try:
        rospy.spin()
    except:
        print('caught exception')
    print('exiting')
